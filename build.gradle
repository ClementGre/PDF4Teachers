import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'application'
    //id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'org.beryx.jlink' version '2.23.3'
    id 'idea'
    id 'com.dua3.javafxgradle7plugin' version '0.0.9'
    id "de.jjohannes.extra-java-module-info" version "0.6"
}

repositories{
    mavenCentral()
    jcenter()
}

def currentOS = DefaultNativePlatform.currentOperatingSystem;
def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
}

extraJavaModuleInfo {
    automaticModule("jlatexmath-1.0.7.jar", "jlatexmath")

    automaticModule("jlatexmath-font-greek-1.0.7.jar", "jlatexmath.font.greek")
    automaticModule("jlatexmath-font-cyrillic-1.0.7.jar", "jlatexmath.font.cyrillic")

    automaticModule("xmpcore-6.0.6.jar", "xmpcore")

    automaticModule("metadata-extractor-2.15.0.jar", "metadata.extractor")

    automaticModule("commons-logging-1.2.jar", "commons.logging")

    automaticModule("jai-imageio-core-1.4.0.jar", "imageio.core")
    automaticModule("jai-imageio-jpeg2000-1.4.0.jar", "jai.imageio.jpeg2000")
}

dependencies{

    // JAVA FX //
    implementation (group: 'org.jfxtras', name: 'jmetro', version: '11.6.14'){
        exclude group: 'org.openjfx'
    }
    // ControlsFX
    implementation group: 'org.controlsfx', name: 'controlsfx', version: '11.1.0'

    // PDF BOX
    implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.22'

    // Support special images format when render a PDF
    implementation group: 'com.github.jai-imageio', name: 'jai-imageio-core', version: '1.4.0'
    implementation group: 'com.github.jai-imageio', name: 'jai-imageio-jpeg2000', version: '1.4.0'
    implementation group: 'org.apache.pdfbox', name: 'jbig2-imageio', version: '3.0.3'

    // Signing and encrypting pdf (not used)
    //compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.53'

    // Image IO - EXIF
    implementation group: 'com.drewnoakes', name: 'metadata-extractor', version: '2.15.0';

    // JSON requests
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.2'
    // YAML
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.28'
    // LaTeX
    implementation 'org.scilab.forge:jlatexmath:1.0.7'

    implementation 'org.jetbrains:annotations:20.1.0'

    // JFX
    implementation "org.openjfx:javafx-base:16:${platform}"
    implementation "org.openjfx:javafx-controls:16:${platform}"
    implementation "org.openjfx:javafx-graphics:16:${platform}"
    implementation "org.openjfx:javafx-swing:16:${platform}"
    implementation "org.openjfx:javafx-fxml:16:${platform}"
}

javafx {
    version = '16'
    modules = ['javafx.controls', 'javafx.swing', 'javafx.fxml']
}

version = "1.3.0"
description = "PDF editing software in large quantities. Designed for teachers, this app keeps recorded previous annotations, and offers functionalities like grading scale, PDF conversion."

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
mainClassName = "fr.clementgre.pdf4teachers/fr.clementgre.pdf4teachers.Main"

application {
    mainModule.set('fr.clementgre.pdf4teachers')
    mainClass.set('fr.clementgre.pdf4teachers.Main')
}


/*gradle.projectsEvaluated {
    tasks.withType(JavaCompile){
        options.compilerArgs << "-Xlint:unchecked"
    }
}*/

run {
    jvmArgs = [
            '--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.javafx.scene=org.controlsfx.controls',
            '--add-exports=javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls',
            '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'
    ]

}

jlink {
    options = [
                '--strip-debug',
                '--compress', '2',
                '--no-header-files',
                '--no-man-pages',
            ] as List<String>
    launcher {
        name = 'PDF4Teachers'
        jvmArgs = [
                '--add-exports=javafx.graphics/com.sun.javafx.scene=org.controlsfx.controls',
                '--add-exports=javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls'
        ]
    }

    if(Os.isFamily(Os.FAMILY_WINDOWS)){
        targetPlatform('win', 'C:\\Program Files\\AdoptOpenJDK\\jdk-16.0.0.36-openj9')
    }else if(Os.isFamily(Os.FAMILY_MAC)){
        targetPlatform('mac', '/Users/vincent/Library/Java/JavaVirtualMachines/jdk-16/Contents/Home')
    }else if(Os.isFamily(Os.FAMILY_UNIX)){
        targetPlatform('lin', '/home/clement/bin/AdoptOpenJDK-16/')
    }

    jpackage {

        installerType = project.findProperty('installerType') // we will pass this from the command line (example: -PinstallerType=msi)

        installerOptions = [
                '--description', project.description,
                //'--copyright', 'Copyrigth 2019 Clément Grennerat',
                '--app-version', project.version,
                '--vendor', "Clément Grennerat",
                '--type', installerType
        ] as List<String>



        if(installerType == 'msi'){ // WINDOWS
            imageOptions += ['--icon', 'src/main/resources/logo.ico']
            installerOptions += [
                    '--win-dir-chooser',
                    '--win-menu',
                    '--win-shortcut',
                    '--win-menu-group',
                    '--file-associations association-win.properties'
            ]
        }else if(installerType == 'dmg'){ // MAC
            imageOptions += ['--icon', 'src/main/resources/logo.icns']
            installerOptions += [
                    "--mac-package-name", "PDF4Teachers",
                    '--file-associations', 'association-osx.properties',
                    '--icon', 'src/main/resources/logo.icns'
            ]
        }else if(installerType in ['deb', 'rpm']){ // LINUX
            imageOptions += ['--icon', 'src/main/resources/logo.png']
            installerOptions += [
                    '--linux-menu-group', 'Education;Office',
                    '--linux-shortcut',
                    '--file-associations', 'association-lin.properties',
                    '--icon', 'src/main/resources/logo.png'
            ]
            if(installerType == 'deb'){
                installerOptions += ['--linux-deb-maintainer', 'clement.grennerat@free.fr']
            }else if(installerType == 'rpm'){
                installerOptions += ['--linux-rpm-license-type', 'Apache-2.0']
            }
        }
    }
}

task packageMsi(type: Exec){
    workingDir project.projectDir
    commandLine = ["gradlew.bat", "jpackage", "-PinstallerType=msi"]
}
task packageDmg(type: Exec){
    workingDir project.projectDir
    commandLine = ["./gradlew", "jpackage", "-PinstallerType=dmg"]
}
task packageDeb(type: Exec){
    workingDir project.projectDir
    commandLine = ["./gradlew", "jpackage", "-PinstallerType=deb"]
}
task packageRpm(type: Exec){
    workingDir project.projectDir
    commandLine = ["./gradlew", "jpackage", "-PinstallerType=rpm"]
}

